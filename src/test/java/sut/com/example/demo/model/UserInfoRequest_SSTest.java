/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.example.demo.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.example.demo.model.UserInfoRequest;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserInfoRequest_SSTest extends UserInfoRequest_SSTest_scaffolding {
// allCoveredLines:[5, 7, 8, 12, 16, 20, 24, 28, 32, 36]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:c4e68d92c9e0d903cfbd571e859f5d08
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Object: yJKhYe/|cCiBbNzp
      //Assert: assertFalse(method_result);
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      
      //Call method: equals
      boolean boolean0 = userInfoRequest0.equals("yJKhYe/|cCiBbNzp");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:e07abc6ed143b28feb6edcad9a2805da
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Object: userInfoRequest0
      //Assert: assertTrue(method_result);
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      
      //Call method: equals
      boolean boolean0 = userInfoRequest0.equals(userInfoRequest0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:cb85a468ca8d524bd6ebb3120f21f634
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 12]
      //Input_0_Object: userInfoRequest1
      //Assert: assertFalse(method_result);
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      Integer integer0 = new Integer(0);
      
      PrivateAccess.setVariable((Class<?>) UserInfoRequest.class, userInfoRequest0, "userId", (Object) integer0);
      UserInfoRequest userInfoRequest1 = new UserInfoRequest();
      
      //Call method: equals
      boolean boolean0 = userInfoRequest0.equals(userInfoRequest1);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:8f7250efa8b87909545d347daa5a2323
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 12]
      //Input_0_Object: userInfoRequest0
      //Assert: assertFalse(method_result);
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      Integer integer0 = new Integer(1);
      
      PrivateAccess.setVariable((Class<?>) UserInfoRequest.class, userInfoRequest0, "userId", (Object) integer0);
      UserInfoRequest userInfoRequest1 = new UserInfoRequest();
      
      //Call method: equals
      boolean boolean0 = userInfoRequest1.equals(userInfoRequest0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:39a316c02f8e8f1ee10ffc8a33f28030
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 8, 12, 16, 20, 24, 28, 32, 36]
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      
      //Call method: hashCode
      userInfoRequest0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setErrorInfo_05()  throws Throwable  {
      //caseID:3dc0f29521f2d4d5a3accbcc9191d009
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: 1.0
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      
      //Call method: setErrorInfo
      userInfoRequest0.setErrorInfo("1.0");
      
      //Test Result Assert
      assertNull(userInfoRequest0.getErrorNo());
  }

  @Test(timeout = 9000)
  public void test_setErrorNo_06()  throws Throwable  {
      //caseID:3d48f4e782cea878e857c97763284daf
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Integer: 0
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      Integer integer0 = new Integer(0);
      
      //Call method: setErrorNo
      userInfoRequest0.setErrorNo(integer0);
      
      //Test Result Assert
      assertNull(userInfoRequest0.getLeaderNo());
  }

  @Test(timeout = 9000)
  public void test_setLeaderNo_07()  throws Throwable  {
      //caseID:a0d35b427b4e2a1dc831c41a4f45739e
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Integer: (-278)
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      Integer integer0 = new Integer((-278));
      
      //Call method: setLeaderNo
      userInfoRequest0.setLeaderNo(integer0);
      
      //Test Result Assert
      assertNull(userInfoRequest0.getUserName());
  }

  @Test(timeout = 9000)
  public void test_setPartId_08()  throws Throwable  {
      //caseID:a3f423d6c1291c0c690fca10435b9b9a
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Integer: (-1)
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      Integer integer0 = new Integer((-1));
      
      //Call method: setPartId
      userInfoRequest0.setPartId(integer0);
      
      //Test Result Assert
      assertNull(userInfoRequest0.getUserId());
  }

  @Test(timeout = 9000)
  public void test_setPartName_09()  throws Throwable  {
      //caseID:f3d86bfc6768eeaf7e91c6c061d8350c
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: 
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      
      //Call method: setPartName
      userInfoRequest0.setPartName("");
      
      //Test Result Assert
      assertNull(userInfoRequest0.getPartId());
  }

  @Test(timeout = 9000)
  public void test_setUserCode_10()  throws Throwable  {
      //caseID:63b004406f54dec4168d7a87cfbc9dae
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: 
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      
      //Call method: setUserCode
      userInfoRequest0.setUserCode("");
      
      //Test Result Assert
      assertNull(userInfoRequest0.getLeaderNo());
  }

  @Test(timeout = 9000)
  public void test_setUserId_11()  throws Throwable  {
      //caseID:7ab69c39be464830f242a28d3e2ceca9
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Integer: 0
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      Integer integer0 = new Integer(0);
      
      //Call method: setUserId
      userInfoRequest0.setUserId(integer0);
      
      //Test Result Assert
      assertEquals(0, (int)userInfoRequest0.getUserId());
  }

  @Test(timeout = 9000)
  public void test_setUserName_12()  throws Throwable  {
      //caseID:3bb824b64759c9fd9c568a8e9bef1f9b
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: ;<\"2W9^ll
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      
      //Call method: setUserName
      userInfoRequest0.setUserName(";<\"2W9^ll");
      
      //Test Result Assert
      assertNull(userInfoRequest0.getErrorInfo());
  }

  @Test(timeout = 9000)
  public void test_setUserTag_13()  throws Throwable  {
      //caseID:0950f085f9825fb2afa6a650e4d59fc5
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: 
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      
      //Call method: setUserTag
      userInfoRequest0.setUserTag("");
      
      //Test Result Assert
      assertEquals("", userInfoRequest0.getUserTag());
  }

  @Test(timeout = 9000)
  public void test_toString_14()  throws Throwable  {
      //caseID:345a459e59bb5b6ffbd17f16e04859d2
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 8, 12, 16, 20, 24, 28, 32, 36]
      //Assert: assertEquals("UserInfoRequest(errorInfo=null, errorNo=null, userId=null, userName=null, userCode=null, userTag=null, leaderNo=null, partId=null, partName=null)", method_result);
      
      UserInfoRequest userInfoRequest0 = new UserInfoRequest();
      
      //Call method: toString
      String string0 = userInfoRequest0.toString();
      
      //Test Result Assert
      assertEquals("UserInfoRequest(errorInfo=null, errorNo=null, userId=null, userName=null, userCode=null, userTag=null, leaderNo=null, partId=null, partName=null)", string0);
  }
}
