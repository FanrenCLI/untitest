/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.example.demo.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.example.demo.model.UserInfo;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserInfo_SSTest extends UserInfo_SSTest_scaffolding {
// allCoveredLines:[5, 10, 14, 18, 22, 26, 30, 34, 38, 42]

  @Test(timeout = 9000)
  public void test_equals_00()  throws Throwable  {
      //caseID:b2d1c703fbdd679d8546ec899b83ff72
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Object: userInfo0
      //Assert: assertTrue(method_result);
      
      UserInfo userInfo0 = new UserInfo();
      
      //Call method: equals
      boolean boolean0 = userInfo0.equals(userInfo0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_01()  throws Throwable  {
      //caseID:f23dd8e5c8dd8645d5f3fff9daa402ab
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Object: 1.0
      //Assert: assertFalse(method_result);
      
      UserInfo userInfo0 = new UserInfo();
      
      //Call method: equals
      boolean boolean0 = userInfo0.equals("1.0");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_02()  throws Throwable  {
      //caseID:fb5b23af34cbb41a807b922d1db88dd8
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 14, 30, 38, 42]
      //Input_0_Object: userInfo0
      //Assert: assertFalse(method_result);
      
      UserInfo userInfo0 = new UserInfo();
      
      PrivateAccess.setVariable((Class<?>) UserInfo.class, userInfo0, "userName", (Object) "59");
      UserInfo userInfo1 = new UserInfo();
      
      //Call method: equals
      boolean boolean0 = userInfo1.equals(userInfo0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_03()  throws Throwable  {
      //caseID:13ea75d69daf429686aa0db0244dab5b
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 14, 30, 38, 42]
      //Input_0_Object: userInfo1
      //Assert: assertFalse(method_result);
      
      UserInfo userInfo0 = new UserInfo();
      
      PrivateAccess.setVariable((Class<?>) UserInfo.class, userInfo0, "userName", (Object) ":ky.");
      UserInfo userInfo1 = new UserInfo();
      
      //Call method: equals
      boolean boolean0 = userInfo0.equals(userInfo1);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_04()  throws Throwable  {
      //caseID:2f561f439cd202f7656e0fa01ac06fff
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 14, 18, 22, 26, 30, 34, 38, 42]
      
      UserInfo userInfo0 = new UserInfo();
      
      //Call method: hashCode
      userInfo0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setLeaderNo_05()  throws Throwable  {
      //caseID:5708753ac8ec941af1ee2734c0621ef7
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Integer: 0
      
      UserInfo userInfo0 = new UserInfo();
      Integer integer0 = new Integer(0);
      
      //Call method: setLeaderNo
      userInfo0.setLeaderNo(integer0);
      
      //Test Result Assert
      assertNull(userInfo0.getUserName());
  }

  @Test(timeout = 9000)
  public void test_setPartId_06()  throws Throwable  {
      //caseID:884a0c2391aacf72d0e8cb21c1a8c176
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Integer: 0
      
      UserInfo userInfo0 = new UserInfo();
      Integer integer0 = new Integer(0);
      
      //Call method: setPartId
      userInfo0.setPartId(integer0);
      
      //Test Result Assert
      assertNull(userInfo0.getLeaderNo());
  }

  @Test(timeout = 9000)
  public void test_setSignInDate_07()  throws Throwable  {
      //caseID:7c2dc471765512f8b3c4fa6aff68f4f9
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Integer: 43
      
      UserInfo userInfo0 = new UserInfo();
      Integer integer0 = new Integer(43);
      
      //Call method: setSignInDate
      userInfo0.setSignInDate(integer0);
      
      //Test Result Assert
      assertNull(userInfo0.getLeaderNo());
  }

  @Test(timeout = 9000)
  public void test_setUserCode_08()  throws Throwable  {
      //caseID:464cd96acbe55dc7155c99500c558bf8
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: , userCode=
      
      UserInfo userInfo0 = new UserInfo();
      
      //Call method: setUserCode
      userInfo0.setUserCode(", userCode=");
      
      //Test Result Assert
      assertNull(userInfo0.getUserLinkNo());
  }

  @Test(timeout = 9000)
  public void test_setUserId_09()  throws Throwable  {
      //caseID:30b56e2a2454377403fa1776f1be2aa5
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_Integer: 0
      
      UserInfo userInfo0 = new UserInfo();
      Integer integer0 = new Integer(0);
      
      //Call method: setUserId
      userInfo0.setUserId(integer0);
      
      //Test Result Assert
      assertNull(userInfo0.getUserLinkNo());
  }

  @Test(timeout = 9000)
  public void test_setUserLinkNo_10()  throws Throwable  {
      //caseID:4469c9f32e29e4e1d7c0d33fae3d3444
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: 1
      
      UserInfo userInfo0 = new UserInfo();
      
      //Call method: setUserLinkNo
      userInfo0.setUserLinkNo("1");
      
      //Test Result Assert
      assertNull(userInfo0.getUserName());
  }

  @Test(timeout = 9000)
  public void test_setUserName_11()  throws Throwable  {
      //caseID:e42b65134c9101c483a31d3514ef8e7b
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: , signInDate=
      
      UserInfo userInfo0 = new UserInfo();
      
      //Call method: setUserName
      userInfo0.setUserName(", signInDate=");
      
      //Test Result Assert
      assertNull(userInfo0.getUserLinkNo());
  }

  @Test(timeout = 9000)
  public void test_setUserSex_12()  throws Throwable  {
      //caseID:119bd3f4ce0760ccf91dd39e4fd0dcd7
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: ks,&Zg1Tazq
      
      UserInfo userInfo0 = new UserInfo();
      
      //Call method: setUserSex
      userInfo0.setUserSex("ks,&Zg1Tazq");
      
      //Test Result Assert
      assertNull(userInfo0.getPartId());
  }

  @Test(timeout = 9000)
  public void test_setUserTag_13()  throws Throwable  {
      //caseID:0989098239c680dd43688051f49dca56
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
      //Input_0_String: smCy>Vtq95<6O 8><?
      
      UserInfo userInfo0 = new UserInfo();
      
      //Call method: setUserTag
      userInfo0.setUserTag("smCy>Vtq95<6O 8><?");
      
      //Test Result Assert
      assertNull(userInfo0.getPartId());
  }

  @Test(timeout = 9000)
  public void test_toString_14()  throws Throwable  {
      //caseID:ae25236c28ca8c21dc1cf32c3e9db3db
      //CoveredLines: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 14, 18, 22, 26, 30, 34, 38, 42]
      //Assert: assertEquals("UserInfo(userId=null, userName=null, userSex=null, userCode=null, userLinkNo=null, signInDate=null, userTag=null, leaderNo=null, partId=null)", method_result);
      
      UserInfo userInfo0 = new UserInfo();
      
      //Call method: toString
      String string0 = userInfo0.toString();
      
      //Test Result Assert
      assertEquals("UserInfo(userId=null, userName=null, userSex=null, userCode=null, userLinkNo=null, signInDate=null, userTag=null, leaderNo=null, partId=null)", string0);
  }
}
