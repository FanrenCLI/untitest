/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.example.demo.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.example.demo.model.UserInfo;
import com.example.demo.model.UserInfoResponse;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserInfoResponse_SSTest extends UserInfoResponse_SSTest_scaffolding {
// allCoveredLines:[7, 9, 10, 11, 12]

  @Test(timeout = 9000)
  public void test_equals_0()  throws Throwable  {
      //caseID:6d87452be1fd934eea6c40b90ce94707
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: (-1)
      //Assert: assertFalse(method_result);
      
      UserInfoResponse userInfoResponse0 = new UserInfoResponse();
      Integer integer0 = new Integer((-1));
      
      //Call method: equals
      boolean boolean0 = userInfoResponse0.equals(integer0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_1()  throws Throwable  {
      //caseID:a9bd21880d4d7655ac451f261d983a21
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Object: userInfoResponse0
      //Assert: assertTrue(method_result);
      
      UserInfoResponse userInfoResponse0 = new UserInfoResponse();
      
      //Call method: equals
      boolean boolean0 = userInfoResponse0.equals(userInfoResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_2()  throws Throwable  {
      //caseID:b877976c1a8a90db62957c18b4d40e54
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 10, 11, 12]
      //Input_0_Object: userInfoResponse0
      //Assert: assertTrue(method_result);
      
      UserInfoResponse userInfoResponse0 = new UserInfoResponse();
      UserInfoResponse userInfoResponse1 = new UserInfoResponse();
      
      //Call method: equals
      boolean boolean0 = userInfoResponse1.equals(userInfoResponse0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_equals_3()  throws Throwable  {
      //caseID:4b48b298ba0cbda0e8bef18892de038d
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 10, 11, 12]
      //Input_0_Object: userInfoResponse1
      //Assert: assertTrue(method_result);
      
      UserInfoResponse userInfoResponse0 = new UserInfoResponse();
      UserInfoResponse userInfoResponse1 = new UserInfoResponse();
      
      //Call method: equals
      boolean boolean0 = userInfoResponse0.equals(userInfoResponse1);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 9000)
  public void test_hashCode_4()  throws Throwable  {
      //caseID:c3503a3c4a9a37229f29cc77554fd292
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 10, 11, 12]
      
      UserInfoResponse userInfoResponse0 = new UserInfoResponse();
      
      //Call method: hashCode
      userInfoResponse0.hashCode();
  }

  @Test(timeout = 9000)
  public void test_setErrorInfo_5()  throws Throwable  {
      //caseID:bc3f29272c27f7b99051184d0b108338
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_String: 43
      
      UserInfoResponse userInfoResponse0 = new UserInfoResponse();
      
      //Call method: setErrorInfo
      userInfoResponse0.setErrorInfo("43");
      
      //Test Result Assert
      assertNull(userInfoResponse0.getErrorNo());
  }

  @Test(timeout = 9000)
  public void test_setErrorNo_6()  throws Throwable  {
      //caseID:de7a85bd55109d445cc4a02aab77faee
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Integer: 257
      
      UserInfoResponse userInfoResponse0 = new UserInfoResponse();
      Integer integer0 = new Integer(257);
      
      //Call method: setErrorNo
      userInfoResponse0.setErrorNo(integer0);
      
      //Test Result Assert
      assertNull(userInfoResponse0.getErrorInfo());
  }

  @Test(timeout = 9000)
  public void test_setRowCount_7()  throws Throwable  {
      //caseID:4ebfdb5188e5ea95361a9ef27b5308de
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_Integer: 1662
      
      UserInfoResponse userInfoResponse0 = new UserInfoResponse();
      Integer integer0 = new Integer(1662);
      
      //Call method: setRowCount
      userInfoResponse0.setRowCount(integer0);
      
      //Test Result Assert
      assertEquals(1662, (int)userInfoResponse0.getRowCount());
  }

  @Test(timeout = 9000)
  public void test_setRows_8()  throws Throwable  {
      //caseID:f862ec37597cbbcc7db7d3cbf106618c
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7]
      //Input_0_List<UserInfo>: linkedList0
      
      UserInfoResponse userInfoResponse0 = new UserInfoResponse();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      
      //Call method: setRows
      userInfoResponse0.setRows(linkedList0);
      
      //Test Result Assert
      assertNull(userInfoResponse0.getRowCount());
  }

  @Test(timeout = 9000)
  public void test_toString_9()  throws Throwable  {
      //caseID:35a57aa9316d5b26ce179dcc386ed0e0
      //CoveredLines: [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 10, 11, 12]
      //Assert: assertEquals("UserInfoResponse(rowCount=null, rows=null, errorNo=null, errorInfo=null)", method_result);
      
      UserInfoResponse userInfoResponse0 = new UserInfoResponse();
      
      //Call method: toString
      String string0 = userInfoResponse0.toString();
      
      //Test Result Assert
      assertEquals("UserInfoResponse(rowCount=null, rows=null, errorNo=null, errorInfo=null)", string0);
  }
}
