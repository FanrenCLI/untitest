/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.example.demo.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.example.demo.mapper.UserMapper;
import com.example.demo.model.UserInfo;
import com.example.demo.model.UserInfoRequest;
import com.example.demo.service.impl.UserServiceImpl;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserServiceImpl_SSTest extends UserServiceImpl_SSTest_scaffolding {
// allCoveredLines:[16, 22, 23, 24, 26, 27, 28, 30, 35, 36, 37, 40, 41, 42, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69]

  @Test(timeout = 9000)
  public void test_checkoutUserExist_0()  throws Throwable  {
      //caseID:7659fb73dce319803a1c3cecddc6f547
      //CoveredLines: [16, 22, 23, 26, 27, 28]
      //Input_0_com.example.demo.model.UserInfoRequest: {}
      //Assert: assertEquals(1, method_result);
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(userInfo0);
      Integer integer0 = new Integer(0);
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(integer0).when(userMapper0).userInfoPartmentQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: checkoutUserExist
      Object object0 = PrivateAccess.callMethod((Class<UserServiceImpl>) UserServiceImpl.class, userServiceImpl0, "checkoutUserExist", (Object) userInfoRequest0, (Class<?>) UserInfoRequest.class);
      
      //Test Result Assert
      assertEquals(1, object0);
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_1()  throws Throwable  {
      //caseID:3b33750a45df3a7671355124f88542e6
      //CoveredLines: [16, 22, 23, 24, 35, 36, 37, 40, 42, 43, 47, 50, 52, 53, 69]
      //Input_0_UserInfoRequest: {getPartId=2, getUserId=2 2}
      //Assert: assertEquals(0, method_result.size());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(linkedList0).when(userMapper0).userInfoQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      Integer integer0 = new Integer(2);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(userInfoRequest0).getPartId();
      doReturn(integer0, integer0).when(userInfoRequest0).getUserId();
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_2()  throws Throwable  {
      //caseID:516c82f1041e7585c2b7c05ad9cff488
      //CoveredLines: [16, 22, 23, 26, 27, 30, 35, 36, 37, 40, 41, 47, 48, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 68, 69]
      //Input_0_UserInfoRequest: {getPartId=1, getUserId=1}
      //Assert: assertTrue(method_result.contains(userInfo0));
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      Integer integer0 = new Integer(1);
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(integer0).when(userMapper0).userInfoPartmentQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(linkedList0).when(userMapper0).userInfoQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(userInfo0).getUserSex();
      doReturn("1,2").when(userInfo0).getUserTag();
      doReturn("1,2").when(userInfo0).toString();
      
      linkedList0.add(userInfo0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(userInfoRequest0).getPartId();
      doReturn(integer0).when(userInfoRequest0).getUserId();
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertTrue(list0.contains(userInfo0));
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_3()  throws Throwable  {
      //caseID:4565fb933ea90942c92a545dc2dec485
      //CoveredLines: [16, 22, 23, 26, 27, 30, 35, 36, 37, 40, 41, 47, 48, 52, 53, 54, 55, 56, 57, 59, 62, 65, 66, 68, 69]
      //Input_0_UserInfoRequest: {getPartId=1, getUserId=1}
      //Assert: assertTrue(method_result.contains(userInfo0));
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      Integer integer0 = new Integer(1);
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(integer0).when(userMapper0).userInfoPartmentQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(linkedList0).when(userMapper0).userInfoQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(userInfo0).getUserSex();
      doReturn("1").when(userInfo0).getUserTag();
      doReturn("1").when(userInfo0).toString();
      
      linkedList0.add(userInfo0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(userInfoRequest0).getPartId();
      doReturn(integer0).when(userInfoRequest0).getUserId();
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertTrue(list0.contains(userInfo0));
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_4()  throws Throwable  {
      //caseID:098a5440e4e0af15100fb6c7e40b6dd5
      //CoveredLines: [16, 22, 23, 26, 27, 28, 35, 36, 37, 40, 42, 43, 47, 50, 52, 53, 54, 55, 56, 59, 62, 65, 66, 68, 69]
      //Input_0_UserInfoRequest: {getPartId=2, getUserId=2 2}
      //Assert: assertTrue(method_result.contains(userInfo0));
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-1432120587").when(userInfo0).getUserSex();
      doReturn("-1432120587").when(userInfo0).getUserTag();
      doReturn("-1432120587").when(userInfo0).toString();
      
      linkedList0.add(userInfo0);
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(linkedList0).when(userMapper0).userInfoQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      Integer integer0 = new Integer(2);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(userInfoRequest0).getPartId();
      doReturn(integer0, integer0).when(userInfoRequest0).getUserId();
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertTrue(list0.contains(userInfo0));
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_5()  throws Throwable  {
      //caseID:8f25d18279f949e9be943e4647422c69
      //CoveredLines: [16, 22, 23, 26, 27, 30, 35, 36, 37, 40, 42, 45, 47, 50, 52, 53, 54, 55, 56, 59, 60, 62, 65, 66, 68, 69]
      //Input_0_UserInfoRequest: {getPartId=132, getUserId=132 132}
      //Assert: assertTrue(method_result.contains(userInfo0));
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1,2").when(userInfo0).getUserSex();
      doReturn("1,2").when(userInfo0).getUserTag();
      doReturn("1,2").when(userInfo0).toString();
      
      linkedList0.add(userInfo0);
      Integer integer0 = new Integer(132);
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(integer0).when(userMapper0).userInfoPartmentQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(linkedList0).when(userMapper0).userInfoQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(userInfoRequest0).getPartId();
      doReturn(integer0, integer0).when(userInfoRequest0).getUserId();
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertTrue(list0.contains(userInfo0));
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_6()  throws Throwable  {
      //caseID:8c721da0e701a5aeb73d780644bba811
      //CoveredLines: [16, 22, 23, 26, 27, 30, 35, 36, 37, 40, 42, 45, 47, 50, 52, 53, 54, 55, 56, 57, 59, 62, 65, 66, 68, 69]
      //Input_0_UserInfoRequest: {getPartId=1662, getUserId=1662 1662}
      //Assert: assertTrue(method_result.contains(userInfo0));
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(userInfo0).getUserSex();
      doReturn("1").when(userInfo0).getUserTag();
      doReturn("1").when(userInfo0).toString();
      Integer integer0 = new Integer(1662);
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(integer0).when(userMapper0).userInfoPartmentQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(linkedList0).when(userMapper0).userInfoQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      
      linkedList0.add(userInfo0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(userInfoRequest0).getPartId();
      doReturn(integer0, integer0).when(userInfoRequest0).getUserId();
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertTrue(list0.contains(userInfo0));
  }
}
