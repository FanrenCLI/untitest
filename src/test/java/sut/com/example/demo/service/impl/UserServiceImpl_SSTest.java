/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.example.demo.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.example.demo.mapper.UserMapper;
import com.example.demo.model.UserInfo;
import com.example.demo.model.UserInfoRequest;
import com.example.demo.service.impl.UserServiceImpl;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserServiceImpl_SSTest extends UserServiceImpl_SSTest_scaffolding {
// allCoveredLines:[16, 23, 24, 25, 27, 28, 29, 31, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 57, 58]

  @Test(timeout = 9000)
  public void test_checkoutUserExist_0()  throws Throwable  {
      //caseID:78e3fb825aba0a24e5da723d9418e3fc
      //CoveredLines: [16, 23, 24, 27, 28, 29]
      //Input_0_com.example.demo.model.UserInfoRequest: {}
      //Assert: assertEquals(0, method_result);
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(userInfo0);
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: checkoutUserExist
      Object object0 = PrivateAccess.callMethod((Class<UserServiceImpl>) UserServiceImpl.class, userServiceImpl0, "checkoutUserExist", (Object) userInfoRequest0, (Class<?>) UserInfoRequest.class);
      
      //Test Result Assert
      assertEquals(0, object0);
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_1()  throws Throwable  {
      //caseID:03c008a5db232c98443f2ebd0f86302c
      //CoveredLines: [16, 23, 24, 25, 36, 37, 38, 39]
      //Input_0_UserInfoRequest: {}
      //Assert: assertEquals(0, method_result.size());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_2()  throws Throwable  {
      //caseID:1dcc5c34374db4657de8451e5cbfcd61
      //CoveredLines: [16, 23, 24, 27, 28, 29, 36, 37, 38, 39]
      //Input_0_UserInfoRequest: {}
      //Assert: assertEquals(0, method_result.size());
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      linkedList0.add(userInfo0);
      Integer integer0 = new Integer(0);
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(integer0).when(userMapper0).userInfoPartmentQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertEquals(0, list0.size());
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_3()  throws Throwable  {
      //caseID:2e3e77d417f23b0e4b118d5d8e59027f
      //CoveredLines: [16, 23, 24, 27, 28, 31, 36, 37, 38, 41, 42, 43, 44, 45, 48, 49, 51, 54, 55, 57, 58]
      //Input_0_UserInfoRequest: {}
      //Assert: assertTrue(method_result.contains(userInfo0));
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1,2").when(userInfo0).getUserSex();
      doReturn("1,2").when(userInfo0).getUserTag();
      doReturn("1,2").when(userInfo0).toString();
      
      linkedList0.add(userInfo0);
      Integer integer0 = new Integer(956);
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(integer0).when(userMapper0).userInfoPartmentQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(linkedList0).when(userMapper0).userInfoQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertTrue(list0.contains(userInfo0));
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_4()  throws Throwable  {
      //caseID:88632f9a8b1f3824c603400a2c30fe9a
      //CoveredLines: [16, 23, 24, 27, 28, 31, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 57, 58]
      //Input_0_UserInfoRequest: {}
      //Assert: assertTrue(method_result.contains(userInfo0));
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(userInfo0).getUserSex();
      doReturn("1,2").when(userInfo0).getUserTag();
      doReturn("8").when(userInfo0).toString();
      
      linkedList0.add(userInfo0);
      Integer integer0 = new Integer((-2097730123));
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(integer0).when(userMapper0).userInfoPartmentQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(linkedList0).when(userMapper0).userInfoQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertTrue(list0.contains(userInfo0));
  }

  @Test(timeout = 9000)
  public void test_userInfoHandler_5()  throws Throwable  {
      //caseID:f2057c562241f8b6b90870bb325704ec
      //CoveredLines: [16, 23, 24, 27, 28, 31, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 51, 54, 55, 57, 58]
      //Input_0_UserInfoRequest: {}
      //Assert: assertTrue(method_result.contains(userInfo0));
      
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userInfo0
      UserInfo userInfo0 = mock(UserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(userInfo0).getUserSex();
      doReturn("Set-Cookie2").when(userInfo0).getUserTag();
      
      linkedList0.add(userInfo0);
      Integer integer0 = new Integer(956);
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userMapper0).userInfoLeaderQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(integer0).when(userMapper0).userInfoPartmentQuery(any(com.example.demo.model.UserInfoRequest.class));
      doReturn(linkedList0).when(userMapper0).userInfoQuery(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserServiceImpl.class, userServiceImpl0, "userMapper", (Object) userMapper0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: userInfoHandler
      List<UserInfo> list0 = userServiceImpl0.userInfoHandler(userInfoRequest0);
      
      //Test Result Assert
      assertTrue(list0.contains(userInfo0));
  }
}
