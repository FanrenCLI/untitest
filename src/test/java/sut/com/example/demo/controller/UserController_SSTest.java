/*
 * This file was automatically generated by SmartUnit
 */

package sut.com.example.demo.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.example.demo.controller.UserController;
import com.example.demo.model.UserInfo;
import com.example.demo.model.UserInfoRequest;
import com.example.demo.model.UserInfoResponse;
import com.example.demo.service.UserService;
import java.util.LinkedList;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVNET = true, resetStaticState = true) 
public class UserController_SSTest extends UserController_SSTest_scaffolding {
// allCoveredLines:[23, 30, 31, 32, 33, 34, 36, 37, 38, 39]

  @Test(timeout = 9000)
  public void test_getUserInfo_0()  throws Throwable  {
      //caseID:bf8adc16ccff527c8b9f891ee420f912
      //CoveredLines: [23, 30, 31, 32, 33, 34]
      //Input_0_UserInfoRequest: null
      //Assert: assertEquals(0, (int)method_result.getRowCount());
      
      UserController userController0 = new UserController();
      
      //Call method: getUserInfo
      UserInfoResponse userInfoResponse0 = userController0.getUserInfo((UserInfoRequest) null);
      
      //Test Result Assert
      assertEquals(0, (int)userInfoResponse0.getRowCount());
  }

  @Test(timeout = 9000)
  public void test_getUserInfo_1()  throws Throwable  {
      //caseID:a81bfdc068a693d7bb7a9011059809ec
      //CoveredLines: [23, 30, 31, 32, 33, 34]
      //Input_0_UserInfoRequest: {}
      //Assert: assertEquals(0, (int)method_result.getRowCount());
      
      UserController userController0 = new UserController();
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getUserInfo
      UserInfoResponse userInfoResponse0 = userController0.getUserInfo(userInfoRequest0);
      
      //Test Result Assert
      assertEquals(0, (int)userInfoResponse0.getRowCount());
  }

  @Test(timeout = 9000)
  public void test_getUserInfo_2()  throws Throwable  {
      //caseID:6b4520f8847d9caa8aa4aeb93a576695
      //CoveredLines: [23, 30, 31, 36, 37, 38, 39]
      //Input_0_UserInfoRequest: {getUserId=0}
      //Assert: assertEquals(0, (int)method_result.getRowCount());
      
      UserController userController0 = new UserController();
      LinkedList<UserInfo> linkedList0 = new LinkedList<UserInfo>();
      //mock userService0
      UserService userService0 = mock(UserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(userService0).userInfoHandler(any(com.example.demo.model.UserInfoRequest.class));
      
      PrivateAccess.setVariable((Class<?>) UserController.class, userController0, "userService", (Object) userService0);
      Integer integer0 = new Integer(0);
      //mock userInfoRequest0
      UserInfoRequest userInfoRequest0 = mock(UserInfoRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(userInfoRequest0).getUserId();
      
      //Call method: getUserInfo
      UserInfoResponse userInfoResponse0 = userController0.getUserInfo(userInfoRequest0);
      
      //Test Result Assert
      assertEquals(0, (int)userInfoResponse0.getRowCount());
  }
}
